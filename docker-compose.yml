version: '3.8'

services:
    backend:
        build:
            args:
                DEV_LOCAL_UID: ${DEV_LOCAL_UID}
                DEV_LOCAL_GID: ${DEV_LOCAL_GID}
            context: .
            dockerfile: ./docker/backend/Dockerfile
        extra_hosts:
            - "host.docker.internal:host-gateway"
        restart: unless-stopped
        tty: true
        working_dir: /var/www
        volumes:
            - .:/var/www
            - ./docker/backend/php.ini:/usr/local/etc/php/php.ini
        depends_on:
            - postgres

    nginx:
        image: nginx:alpine
        restart: unless-stopped
        tty: true
        ports:
            - "80:80"
        volumes:
            - .:/var/www
            - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
        depends_on:
            - backend

    postgres:
        image: postgres:latest
        restart: unless-stopped
        tty: true
        ports:
            - ${DOCKER_POSTGRES_PORT}:5432
        environment:
            - POSTGRES_HOST_AUTH_METHOD="trust"
            - POSTGRES_DB=${DB_DATABASE}
            - POSTGRES_USER=${DB_USERNAME}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
        volumes:
            - ./docker/postgres:/var/lib/postgresql/data
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}" ]

    #    mysql:
    #        image: mysql:5.7.22
    #        restart: unless-stopped
    #        tty: true
    #        ports:
    #            - ${DOCKER_MYSQL_PORT}:3306
    #        command: [ '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci','--default-authentication-plugin=mysql_native_password' ]
    #        environment:
    #            MYSQL_DATABASE: ${DB_DATABASE}
    #            MYSQL_ROOT_PASSWORD: 'root'
    #            MYSQL_USER: ${DB_USERNAME}
    #            MYSQL_PASSWORD: ${DB_PASSWORD}
    #        volumes:
    #            - dbdata:/var/lib/mysql
    #            - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
    #        healthcheck:
    #            test: [ "CMD", "mysqladmin", "ping" ]

    node:
        build:
            context: .
            dockerfile: ./docker/nodejs/Dockerfile
        tty: true
        ports:
            - "5173:5173"
        working_dir: /var/www
        volumes:
            - .:/var/www
# Тома
volumes:
    dbdata:
        driver: local
